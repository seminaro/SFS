Package: SFS
Type: Package
Title: Similarity-First Search Seriation Algorithm
Version: 0.1
Date: 2016-11-223
Authors@R: c(
	   person("Matteo", "Seminaroti",
	          role = c("aut", "cre", "cph"),
		  email = "matteo.seminaroti@gmail.com"),
	   person("Utz-Uwe", "Haus", role = c("ctb","cph"),
	          email = "uhaus@cray.com"))
Maintainer: Matteo Seminaroti <matteo.seminaroti@gmail.com>
Description: This package includes the implementation of the \emph{Similarity-First Search algorithm (SFS)}, a combinatorial algorithm which can be used to solve the seriation problem and to recognize some structured weighted graphs. \cr Given a set of objects and their pairwise similarities (or dissimilarities), the seriation problem asks to find a linear order (or \emph{ranking}) of the objects such that similar objects are ordered close to each other. One can visualize the data as a matrix \eqn{A=(A_{ij})} whose rows/columns represent the objects to order and each entry \eqn{A_{ij}} represents the similarity between the corresponding objects \eqn{i} and \eqn{j}. Ideally, the goal would be to find a linear order \eqn{\pi} of the objects satisfying \eqn{A_{ij} \leq \min\{A_{ik}, A_{jk}\}} for each triple of objects ranked as \eqn{i <_{\pi} j <_{\pi} k} in \eqn{\pi}.  Then a similarity matrix \eqn{A} satisfying the above property is called a \emph{Robinsonian similarity}, and \eqn{\pi} is called a \emph{Robinson ordering} of \eqn{A}. In other words, a Robinsonian similarity matrix can be reordered in such a way that its entries are monotonically nondecreasing when moving toward the diagonal. Analogously, a dissimilarity matrix \eqn{D} is called \emph{Robinsonian} if the matrix \eqn{-D} is a Robinsonian similarity  or, equivalently, if \eqn{D} can be reordered in such a way that its entries are monotonically nonincreasing when moving toward the diagonal. \cr Any similarity (or dissimilarity) matrix can be seen as adjacency matrix of a weighted graph, where each entry represents the similarity (or dissimilarity) between two vertices. The SFS algorithm represents a generalization to weighted graphs of the graph search algorithm \emph{Lexicographic Breadth-First Search (Lex-BFS)}, a variant of Breadth-First Search. Specifically, at each iteration the neighbourhood of the current vertex is sorted for decreasing values (in case of similarity data) or increasing values (in case of dissimilarity data). This induces a partial order of the unvisited vertices, which is refined by iteratively sorting the neighbourhood of previously visited vertices. Finally, the next vertex to visit is the vertex with the highest similarity (in case of similarity data) or lowest dissimilarity (in case of dissimilarity data) with respect to the current vertex, while respecting the similarity imposed by previously visited vertices. \cr The SFS algorithm reduces to Lex-BFS when applied to binary matrices (or, equivalently, unweighted graphs). Hence this library can be also considered for Lex-BFS applications such as recognition of graph classes like chordal or unit interval graphs. \cr In fact, the SFS seriation algorithm implemented in this package is a \emph{multisweep algorithm}, which consists in repeating a finite number of SFS iterations (called \emph{sweeps}) (at most \eqn{n} sweeps for a matrix of size \eqn{n}). If the data matrix has a Robinsonian structure, then the ranking returned by the multistep SFS algorithm is a Robinson ordering of the input matrix. Otherwise the algorithm can be used as a heuristic to return a ranking partially satisfying the Robinson property.  \cr The package consists of two functions. The function \code{read()} takes as input the (similarity or dissimilarity) data between the objects to sort and builds a 3-columns \code{data frame} where each row \eqn{(i, j, A_{ij})} represents the similarity or dissimilarity \eqn{A_{ij}} between objects \eqn{i} and \eqn{j}. \cr Such \code{data frame} is then used as input for \code{SFS()} to return the ranking of the objects. This library is linked to \emph{Rcpp} and \emph{RcppArmadillo}.
License: GPL-3
Encoding: UTF-8
Imports:
    Rcpp (>= 0.12.7)
Suggests: seriation
LinkingTo: Rcpp, RcppArmadillo
SystemRequirements: C++11
RoxygenNote: 6.0.1
